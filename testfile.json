{
	"info": {
		"_postman_id": "YOUR_UNIQUE_COLLECTION_ID_HERE",
		"name": "Level Minds Backend Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "YOUR_EXPORTER_ID_HERE"
	},
	"item": [
		{
			"name": "Auth - Register & Login",
			"item": [
				{
					"name": "Register Admin User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const timestamp = Date.now();",
									"pm.environment.set(\"adminEmail\", `admin_test_${timestamp}@test.com`);",
									"pm.environment.set(\"adminPassword\", \"adminpassword\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Registration successful\", function () {",
									"    pm.response.to.have.jsonBody(\"success\", true);",
									"    pm.response.to.have.jsonBody(\"message\", \"Registration successful\");",
									"});",
									"const jsonData = pm.response.json();",
									"pm.expect(jsonData.user).to.have.property('id');",
									"pm.expect(jsonData.user.role).to.eql('admin');",
									"pm.environment.set(\"adminUserId\", jsonData.user.id);",
									"pm.environment.set(\"adminToken\", jsonData.token);",
									"console.log(\"Admin User ID: \" + pm.environment.get(\"adminUserId\"));",
									"console.log(\"Admin Token: \" + pm.environment.get(\"adminToken\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{adminEmail}}\",\n    \"password\": \"{{adminPassword}}\",\n    \"role\": \"admin\",\n    \"name\": \"Test Admin\"\n}"
						},
						"url": {
							"raw": "http://localhost:{{port}}/api/auth/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Student User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const timestamp = Date.now();",
									"pm.environment.set(\"studentEmail\", `student_test_${timestamp}@test.com`);",
									"pm.environment.set(\"studentPassword\", \"studentpassword\");",
									"pm.environment.set(\"studentName\", \"Test Student\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Registration successful\", function () {",
									"    pm.response.to.have.jsonBody(\"success\", true);",
									"    pm.response.to.have.jsonBody(\"message\", \"Registration successful\");",
									"});",
									"const jsonData = pm.response.json();",
									"pm.expect(jsonData.user).to.have.property('id');",
									"pm.expect(jsonData.user.role).to.eql('student');",
									"pm.environment.set(\"studentUserId\", jsonData.user.id);",
									"pm.environment.set(\"studentToken\", jsonData.token);",
									"console.log(\"Student User ID: \" + pm.environment.get(\"studentUserId\"));",
									"console.log(\"Student Token: \" + pm.environment.get(\"studentToken\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{studentEmail}}\",\n    \"password\": \"{{studentPassword}}\",\n    \"role\": \"student\",\n    \"name\": \"{{studentName}}\"\n}"
						},
						"url": {
							"raw": "http://localhost:{{port}}/api/auth/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register School User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const timestamp = Date.now();",
									"pm.environment.set(\"schoolEmail\", `school_test_${timestamp}@test.com`);",
									"pm.environment.set(\"schoolPassword\", \"schoolpassword\");",
									"pm.environment.set(\"schoolName\", \"Test School\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Registration successful\", function () {",
									"    pm.response.to.have.jsonBody(\"success\", true);",
									"    pm.response.to.have.jsonBody(\"message\", \"Registration successful\");",
									"});",
									"const jsonData = pm.response.json();",
									"pm.expect(jsonData.user).to.have.property('id');",
									"pm.expect(jsonData.user.role).to.eql('school');",
									"pm.environment.set(\"schoolUserId\", jsonData.user.id);",
									"pm.environment.set(\"schoolToken\", jsonData.token);",
									"console.log(\"School User ID: \" + pm.environment.get(\"schoolUserId\"));",
									"console.log(\"School Token: \" + pm.environment.get(\"schoolToken\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{schoolEmail}}\",\n    \"password\": \"{{schoolPassword}}\",\n    \"role\": \"school\",\n    \"name\": \"{{schoolName}}\"\n}"
						},
						"url": {
							"raw": "http://localhost:{{port}}/api/auth/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Admin User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Login successful\", function () {",
									"    pm.response.to.have.jsonBody(\"success\", true);",
									"    pm.response.to.have.jsonBody(\"message\", \"Login successful\");",
									"});",
									"const jsonData = pm.response.json();",
									"pm.expect(jsonData.user.role).to.eql('admin');",
									"pm.environment.set(\"adminToken\", jsonData.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{adminEmail}}\",\n    \"password\": \"{{adminPassword}}\"\n}"
						},
						"url": {
							"raw": "http://localhost:{{port}}/api/auth/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Student User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Login successful\", function () {",
									"    pm.response.to.have.jsonBody(\"success\", true);",
									"    pm.response.to.have.jsonBody(\"message\", \"Login successful\");",
									"});",
									"const jsonData = pm.response.json();",
									"pm.expect(jsonData.user.role).to.eql('student');",
									"pm.environment.set(\"studentToken\", jsonData.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{studentEmail}}\",\n    \"password\": \"{{studentPassword}}\"\n}"
						},
						"url": {
							"raw": "http://localhost:{{port}}/api/auth/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login School User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Login successful\", function () {",
									"    pm.response.to.have.jsonBody(\"success\", true);",
									"    pm.response.to.have.jsonBody(\"message\", \"Login successful\");",
									"});",
									"const jsonData = pm.response.json();",
									"pm.expect(jsonData.user.role).to.eql('school');",
									"pm.environment.set(\"schoolToken\", jsonData.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{schoolEmail}}\",\n    \"password\": \"{{schoolPassword}}\"\n}"
						},
						"url": {
							"raw": "http://localhost:{{port}}/api/auth/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "File Upload",
			"item": [
				{
					"name": "Upload Profile Image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Image upload successful\", function () {",
									"    pm.response.to.have.jsonBody(\"success\", true);",
									"    pm.response.to.have.property(\"imageUrl\");",
									"});",
									"const jsonData = pm.response.json();",
									"pm.environment.set(\"uploadedImageUrl\", jsonData.imageUrl);",
									"console.log(\"Uploaded Image URL: \" + pm.environment.get(\"uploadedImageUrl\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{studentToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "image",
									"type": "file",
									"src": "/C:/Users/rog/Downloads/posttest.jpg"
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{port}}/api/upload-image",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"upload-image"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Student Profile - My Skills",
			"item": [
				{
					"name": "Delete All Student Personal Skills (Cleanup)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// This script fetches all skills and deletes them one by one",
									"// It's useful for cleanup before running tests that create skills",
									"const studentToken = pm.environment.get(\"studentToken\");",
									"const port = pm.environment.get(\"port\");",
									"",
									"pm.sendRequest({",
									"    url: `http://localhost:${port}/api/students/profile/my-skills`,",
									"    method: 'GET',",
									"    header: {",
									"        'Authorization': `Bearer ${studentToken}`",
									"    }",
									"}, function (err, res) {",
									"    if (err) {",
									"        console.error(\"Error fetching skills for cleanup: \", err);",
									"        return;",
									"    }",
									"    const jsonData = res.json();",
									"    if (jsonData.success && jsonData.personalSkills && jsonData.personalSkills.length > 0) {",
									"        console.log(`Found ${jsonData.personalSkills.length} skills to delete.`);",
									"        jsonData.personalSkills.forEach(skill => {",
									"            pm.sendRequest({",
									"                url: `http://localhost:${port}/api/students/profile/my-skills/${skill.id}`,",
									"                method: 'DELETE',",
									"                header: {",
									"                    'Authorization': `Bearer ${studentToken}`",
									"                }",
									"            }, function (deleteErr, deleteRes) {",
									"                if (deleteErr) {",
									"                    console.error(`Error deleting skill ${skill.id}: `, deleteErr);",
									"                } else {",
									"                    console.log(`Skill ${skill.id} deleted: `, deleteRes.json());",
									"                }",
									"            });",
									"        });",
									"    } else {",
									"        console.log(\"No skills found for cleanup.\");",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/api/students/profile/my-skills",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"students",
								"profile",
								"my-skills"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create 8 Personal Skills",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Skills added successfully\", function () {",
									"    pm.response.to.have.jsonBody(\"success\", true);",
									"    pm.response.to.have.jsonBody(\"message\", \"Personal skills added successfully\");",
									"    pm.expect(pm.response.json().skills).to.have.lengthOf(8);",
									"});",
									"const jsonData = pm.response.json();",
									"if (jsonData.success && jsonData.skills && jsonData.skills.length > 0) {",
									"    pm.environment.set(\"firstPersonalSkillId\", jsonData.skills[0].id);",
									"    console.log(\"First Personal Skill ID: \" + pm.environment.get(\"firstPersonalSkillId\"));",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{studentToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"skill_names\": [\n        \"Communication\",\n        \"Teamwork\",\n        \"Critical Thinking\",\n        \"Adaptability\",\n        \"Leadership\",\n        \"Time Management\",\n        \"Creativity\",\n        \"Problem Solving\"\n    ]\n}"
						},
						"url": {
							"raw": "http://localhost:{{port}}/api/students/profile/my-skills",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"students",
								"profile",
								"my-skills"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt to Create 9th Personal Skill (Expect Error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Error message for max skills limit\", function () {",
									"    pm.response.to.have.jsonBody(\"msg\", \"Adding these skills would exceed the maximum of 8 personal skills allowed. You currently have 8 skills.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{studentToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"skill_names\": [\n        \"Over The Limit Skill\"\n    ]\n}"
						},
						"url": {
							"raw": "http://localhost:{{port}}/api/students/profile/my-skills",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"students",
								"profile",
								"my-skills"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Student Personal Skills",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Get skills successful\", function () {",
									"    pm.response.to.have.jsonBody(\"success\", true);",
									"    pm.expect(pm.response.json().personalSkills).to.be.an('array');",
									"});",
									"pm.expect(pm.response.json().personalSkills).to.have.lengthOf(8); // Should still be 8 after failed attempt to add 9th"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{studentToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:{{port}}/api/students/profile/my-skills",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"students",
								"profile",
								"my-skills"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a Personal Skill",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Skill updated successfully\", function () {",
									"    pm.response.to.have.jsonBody(\"success\", true);",
									"    pm.response.to.have.jsonBody(\"message\", \"Personal skill updated successfully\");",
									"    pm.expect(pm.response.json().skill.skill_name).to.eql('Effective Communication');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{studentToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"skill_name\": \"Effective Communication\"\n}"
						},
						"url": {
							"raw": "http://localhost:{{port}}/api/students/profile/my-skills/{{firstPersonalSkillId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"students",
								"profile",
								"my-skills",
								"{{firstPersonalSkillId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a Personal Skill",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Skill deleted successfully\", function () {",
									"    pm.response.to.have.jsonBody(\"success\", true);",
									"    pm.response.to.have.jsonBody(\"message\", \"Personal skill deleted successfully\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{studentToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:{{port}}/api/students/profile/my-skills/{{firstPersonalSkillId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"students",
								"profile",
								"my-skills",
								"{{firstPersonalSkillId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Personal Skill Deleted (Get All)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Skills list should have 7 items\", function () {",
									"    pm.response.to.have.jsonBody(\"success\", true);",
									"    pm.expect(pm.response.json().personalSkills).to.be.an('array');",
									"    pm.expect(pm.response.json().personalSkills).to.have.lengthOf(7);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{studentToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:{{port}}/api/students/profile/my-skills",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"students",
								"profile",
								"my-skills"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Student Profile - Certifications",
			"item": [
				{
					"name": "Delete All Student Certifications (Cleanup)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// This script fetches all certifications and deletes them one by one",
									"// It's useful for cleanup before running tests that create certifications",
									"const studentToken = pm.environment.get(\"studentToken\");",
									"const port = pm.environment.get(\"port\");",
									"",
									"pm.sendRequest({",
									"    url: `http://localhost:${port}/api/students/profile/certifications`,",
									"    method: 'GET',",
									"    header: {",
									"        'Authorization': `Bearer ${studentToken}`",
									"    }",
									"}, function (err, res) {",
									"    if (err) {",
									"        console.error(\"Error fetching certifications for cleanup: \", err);",
									"        return;",
									"    }",
									"    const jsonData = res.json();",
									"    if (jsonData.success && jsonData.certifications && jsonData.certifications.length > 0) {",
									"        console.log(`Found ${jsonData.certifications.length} certifications to delete.`);",
									"        jsonData.certifications.forEach(cert => {",
									"            pm.sendRequest({",
									"                url: `http://localhost:${port}/api/students/profile/certifications/${cert.id}`,",
									"                method: 'DELETE',",
									"                header: {",
									"                    'Authorization': `Bearer ${studentToken}`",
									"                }",
									"            }, function (deleteErr, deleteRes) {",
									"                if (deleteErr) {",
									"                    console.error(`Error deleting cert ${cert.id}: `, deleteErr);",
									"                } else {",
									"                    console.log(`Cert ${cert.id} deleted: `, deleteRes.json());",
									"                }",
									"            });",
									"        });",
									"    } else {",
									"        console.log(\"No certifications found for cleanup.\");",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/api/students/profile/certifications",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"students",
								"profile",
								"certifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Certification with File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Certification added successfully\", function () {",
									"    pm.response.to.have.jsonBody(\"success\", true);",
									"    pm.response.to.have.jsonBody(\"message\", \"Certification added successfully\");",
									"    pm.expect(pm.response.json().certificate).to.have.property('id');",
									"    pm.expect(pm.response.json().certificate).to.have.property('file_url');",
									"});",
									"const jsonData = pm.response.json();",
									"pm.environment.set(\"certificationId\", jsonData.certificate.id);",
									"console.log(\"Certification ID: \" + pm.environment.get(\"certificationId\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{studentToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Teaching Excellence Award",
									"type": "text"
								},
								{
									"key": "given_by",
									"value": "Ministry of Education",
									"type": "text"
								},
								{
									"key": "description",
									"value": "Awarded for outstanding performance in student engagement.",
									"type": "text"
								},
								{
									"key": "date",
									"value": "2023-05-15",
									"type": "text"
								},
								{
									"key": "certificate_file",
									"type": "file",
									"src": "/C:/Users/rog/Downloads/posttest.jpg"
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{port}}/api/students/profile/certifications",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"students",
								"profile",
								"certifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Certifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Get certifications successful\", function () {",
									"    pm.response.to.have.jsonBody(\"success\", true);",
									"    pm.expect(pm.response.json().certifications).to.be.an('array');",
									"    pm.expect(pm.response.json().certifications).to.have.lengthOf.at.least(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{studentToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:{{port}}/api/students/profile/certifications",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"students",
								"profile",
								"certifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Certification with New File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Certification updated successfully\", function () {",
									"    pm.response.to.have.jsonBody(\"success\", true);",
									"    pm.response.to.have.jsonBody(\"message\", \"Certification updated successfully\");",
									"    pm.expect(pm.response.json().certificate.name).to.eql('Teaching Excellence Award (Updated)');",
									"    pm.expect(pm.response.json().certificate).to.have.property('file_url');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{studentToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Teaching Excellence Award (Updated)",
									"type": "text"
								},
								{
									"key": "description",
									"value": "Updated description for the certificate.",
									"type": "text"
								},
								{
									"key": "certificate_file",
									"type": "file",
									"src": "/C:/Users/rog/Downloads/posttest.jpg"
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{port}}/api/students/profile/certifications/{{certificationId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"students",
								"profile",
								"certifications",
								"{{certificationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Certification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Certification deleted successfully\", function () {",
									"    pm.response.to.have.jsonBody(\"success\", true);",
									"    pm.response.to.have.jsonBody(\"message\", \"Certification deleted successfully\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{studentToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:{{port}}/api/students/profile/certifications/{{certificationId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"students",
								"profile",
								"certifications",
								"{{certificationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Certification Deleted (Get All)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Certifications list should be empty\", function () {",
									"    pm.response.to.have.jsonBody(\"success\", true);",
									"    pm.expect(pm.response.json().certifications).to.be.an('array');",
									"    pm.expect(pm.response.json().certifications).to.have.lengthOf(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{studentToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:{{port}}/api/students/profile/certifications",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"students",
								"profile",
								"certifications"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Admin - User Management",
			"item": [
				{
					"name": "Get All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an array of users\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('array');",
									"});",
									"pm.test(\"Contains admin user\", function () {",
									"    const users = pm.response.json();",
									"    const adminUser = users.find(u => u.role === 'admin' && u.email === pm.environment.get(\"adminEmail\"));",
									"    pm.expect(adminUser).to.not.be.undefined;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:{{port}}/api/admin/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User Email (Admin)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const timestamp = Date.now();",
									"pm.environment.set(\"updatedStudentEmail\", `updated_student_${timestamp}@test.com`);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"User email updated successfully\", function () {",
									"    pm.response.to.have.jsonBody(\"success\", true);",
									"    pm.response.to.have.jsonBody(\"message\", \"User updated successfully\");",
									"    pm.expect(pm.response.json().user.email).to.eql(pm.environment.get(\"updatedStudentEmail\"));",
									"    pm.expect(pm.response.json().user.role).to.eql('student'); // Role should NOT change",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{updatedStudentEmail}}\",\n    \"role\": \"school\" // This should be ignored\n}"
						},
						"url": {
							"raw": "http://localhost:{{port}}/api/admin/users/{{studentUserId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"admin",
								"users",
								"{{studentUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Student User (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"User deleted successfully\", function () {",
									"    pm.response.to.have.jsonBody(\"success\", true);",
									"    pm.response.to.have.jsonBody(\"message\", \"User removed successfully\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:{{port}}/api/admin/users/{{studentUserId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"admin",
								"users",
								"{{studentUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Student User Deleted (Get All Users)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Deleted user not in list\", function () {",
									"    const users = pm.response.json();",
									"    const deletedUser = users.find(u => u.id === pm.environment.get(\"studentUserId\"));",
									"    pm.expect(deletedUser).to.be.undefined;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:{{port}}/api/admin/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"admin",
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Admin - Assessment Master Data",
			"item": [
				{
					"name": "Assessment Sub-Skills - Cleanup",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Cleanup any existing sub-skills before running tests",
									"const adminToken = pm.environment.get(\"adminToken\");",
									"const port = pm.environment.get(\"port\");",
									"",
									"pm.sendRequest({",
									"    url: `http://localhost:${port}/api/admin/assessment-sub-skills`,",
									"    method: 'GET',",
									"    header: {",
									"        'Authorization': `Bearer ${adminToken}`",
									"    }",
									"}, function (err, res) {",
									"    if (err) {",
									"        console.error(\"Error fetching sub-skills for cleanup: \", err);",
									"        return;",
									"    }",
									"    const jsonData = res.json();",
									"    if (jsonData.success && jsonData.subSkills && jsonData.subSkills.length > 0) {",
									"        console.log(`Found ${jsonData.subSkills.length} sub-skills to delete.`);",
									"        jsonData.subSkills.forEach(subSkill => {",
									"            pm.sendRequest({",
									"                url: `http://localhost:${port}/api/admin/assessment-sub-skills/${subSkill.id}`,",
									"                method: 'DELETE',",
									"                header: {",
									"                    'Authorization': `Bearer ${adminToken}`",
									"                }",
									"            }, function (deleteErr, deleteRes) {",
									"                if (deleteErr) {",
									"                    console.error(`Error deleting sub-skill ${subSkill.id}: `, deleteErr);",
									"                } else {",
									"                    console.log(`Sub-skill ${subSkill.id} deleted: `, deleteRes.json());",
									"                }",
									"            });",
									"        });",
									"    } else {",
									"        console.log(\"No sub-skills found for cleanup.\");",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/api/admin/assessment-sub-skills",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"admin",
								"assessment-sub-skills"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assessment Skills - Cleanup",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Cleanup any existing skills before running tests",
									"const adminToken = pm.environment.get(\"adminToken\");",
									"const port = pm.environment.get(\"port\");",
									"",
									"pm.sendRequest({",
									"    url: `http://localhost:${port}/api/admin/assessment-skills`,",
									"    method: 'GET',",
									"    header: {",
									"        'Authorization': `Bearer ${adminToken}`",
									"    }",
									"}, function (err, res) {",
									"    if (err) {",
									"        console.error(\"Error fetching skills for cleanup: \", err);",
									"        return;",
									"    }",
									"    const jsonData = res.json();",
									"    if (jsonData.success && jsonData.skills && jsonData.skills.length > 0) {",
									"        console.log(`Found ${jsonData.skills.length} skills to delete.`);",
									"        jsonData.skills.forEach(skill => {",
									"            pm.sendRequest({",
									"                url: `http://localhost:${port}/api/admin/assessment-skills/${skill.id}`,",
									"                method: 'DELETE',",
									"                header: {",
									"                    'Authorization': `Bearer ${adminToken}`",
									"                }",
									"            }, function (deleteErr, deleteRes) {",
									"                if (deleteErr) {",
									"                    console.error(`Error deleting skill ${skill.id}: `, deleteErr);",
									"                } else {",
									"                    console.log(`Skill ${skill.id} deleted: `, deleteRes.json());",
									"                }",
									"            });",
									"        });",
									"    } else {",
									"        console.log(\"No skills found for cleanup.\");",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/api/admin/assessment-skills",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"admin",
								"assessment-skills"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assessment Categories - Cleanup",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Cleanup any existing categories before running tests",
									"const adminToken = pm.environment.get(\"adminToken\");",
									"const port = pm.environment.get(\"port\");",
									"",
									"pm.sendRequest({",
									"    url: `http://localhost:${port}/api/admin/assessment-skill-categories`,",
									"    method: 'GET',",
									"    header: {",
									"        'Authorization': `Bearer ${adminToken}`",
									"    }",
									"}, function (err, res) {",
									"    if (err) {",
									"        console.error(\"Error fetching categories for cleanup: \", err);",
									"        return;",
									"    }",
									"    const jsonData = res.json();",
									"    if (jsonData.success && jsonData.categories && jsonData.categories.length > 0) {",
									"        console.log(`Found ${jsonData.categories.length} categories to delete.`);",
									"        jsonData.categories.forEach(cat => {",
									"            pm.sendRequest({",
									"                url: `http://localhost:${port}/api/admin/assessment-skill-categories/${cat.id}`,",
									"                method: 'DELETE',",
									"                header: {",
									"                    'Authorization': `Bearer ${adminToken}`",
									"                }",
									"            }, function (deleteErr, deleteRes) {",
									"                if (deleteErr) {",
									"                    console.error(`Error deleting category ${cat.id}: `, deleteErr);",
									"                } else {",
									"                    console.log(`Category ${cat.id} deleted: `, deleteRes.json());",
									"                }",
									"            });",
									"        });",
									"    } else {",
									"        console.log(\"No categories found for cleanup.\");",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/api/admin/assessment-skill-categories",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"admin",
								"assessment-skill-categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Assessment Skill Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Category created successfully\", function () {",
									"    pm.response.to.have.jsonBody(\"success\", true);",
									"    pm.response.to.have.jsonBody(\"message\", \"Category created successfully\");",
									"});",
									"const jsonData = pm.response.json();",
									"pm.environment.set(\"assessmentCategoryId\", jsonData.category.id);",
									"console.log(\"Assessment Category ID: \" + pm.environment.get(\"assessmentCategoryId\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Pedagogical Skills\",\n    \"description\": \"Skills related to teaching methods and student engagement.\"\n}"
						},
						"url": {
							"raw": "http://localhost:{{port}}/api/admin/assessment-skill-categories",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"admin",
								"assessment-skill-categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Assessment Skill Categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Get categories successful\", function () {",
									"    pm.response.to.have.jsonBody(\"success\", true);",
									"    pm.expect(pm.response.json().categories).to.be.an('array');",
									"    pm.expect(pm.response.json().categories).to.have.lengthOf.at.least(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:{{port}}/api/admin/assessment-skill-categories",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"admin",
								"assessment-skill-categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Assessment Skill Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Category updated successfully\", function () {",
									"    pm.response.to.have.jsonBody(\"success\", true);",
									"    pm.response.to.have.jsonBody(\"message\", \"Category updated successfully\");",
									"    pm.expect(pm.response.json().category.name).to.eql('Pedagogical Skills (Updated)');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Pedagogical Skills (Updated)\",\n    \"description\": \"Updated description for teaching and engagement skills.\"\n}"
						},
						"url": {
							"raw": "http://localhost:{{port}}/api/admin/assessment-skill-categories/{{assessmentCategoryId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"admin",
								"assessment-skill-categories",
								"{{assessmentCategoryId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Assessment Skill",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Assessment skill created successfully\", function () {",
									"    pm.response.to.have.jsonBody(\"success\", true);",
									"    pm.response.to.have.jsonBody(\"message\", \"Assessment skill created successfully\");",
									"});",
									"const jsonData = pm.response.json();",
									"pm.environment.set(\"assessmentSkillId\", jsonData.skill.id);",
									"console.log(\"Assessment Skill ID: \" + pm.environment.get(\"assessmentSkillId\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Classroom Management\",\n    \"description\": \"Ability to organize and control the classroom environment.\",\n    \"categoryId\": {{assessmentCategoryId}}\n}"
						},
						"url": {
							"raw": "http://localhost:{{port}}/api/admin/assessment-skills",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"admin",
								"assessment-skills"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Assessment Skills",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Get skills successful\", function () {",
									"    pm.response.to.have.jsonBody(\"success\", true);",
									"    pm.expect(pm.response.json().skills).to.be.an('array');",
									"    pm.expect(pm.response.json().skills).to.have.lengthOf.at.least(1);",
									"});",
									"const jsonData = pm.response.json();",
									"pm.expect(jsonData.skills[0].AssessmentSkillCategory.name).to.eql('Pedagogical Skills (Updated)');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:{{port}}/api/admin/assessment-skills",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"admin",
								"assessment-skills"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Assessment Skills by Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Get skills by category successful\", function () {",
									"    pm.response.to.have.jsonBody(\"success\", true);",
									"    pm.expect(pm.response.json().skills).to.be.an('array');",
									"    pm.expect(pm.response.json().skills.length).to.be.at.least(1);",
									"});",
									"const jsonData = pm.response.json();",
									"pm.expect(jsonData.skills[0].categoryId).to.eql(pm.environment.get(\"assessmentCategoryId\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:{{port}}/api/admin/assessment-skills/by-category/{{assessmentCategoryId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"admin",
								"assessment-skills",
								"by-category",
								"{{assessmentCategoryId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Assessment Skill",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Skill updated successfully\", function () {",
									"    pm.response.to.have.jsonBody(\"success\", true);",
									"    pm.response.to.have.jsonBody(\"message\", \"Assessment skill updated successfully\");",
									"    pm.expect(pm.response.json().skill.name).to.eql('Classroom Management (Updated)');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Classroom Management (Updated)\",\n    \"description\": \"Updated description for managing classroom effectively.\"\n}"
						},
						"url": {
							"raw": "http://localhost:{{port}}/api/admin/assessment-skills/{{assessmentSkillId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"admin",
								"assessment-skills",
								"{{assessmentSkillId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create 4 Assessment Sub-Skills",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"subSkillNames\", [",
									"    \"Lesson Planning\",",
									"    \"Student Engagement Strategies\",",
									"    \"Behavior Management\",",
									"    \"Assessment & Feedback\"",
									"]);",
									"pm.environment.set(\"currentSubSkillIndex\", 0);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Sub-skill created successfully\", function () {",
									"    pm.response.to.have.jsonBody(\"success\", true);",
									"    pm.response.to.have.jsonBody(\"message\", \"Assessment sub-skill created successfully\");",
									"});",
									"const jsonData = pm.response.json();",
									"if (pm.environment.get(\"currentSubSkillIndex\") === 0) { // Only set the first one's ID for update/delete tests",
									"    pm.environment.set(\"assessmentSubSkillId\", jsonData.subSkill.id);",
									"    console.log(\"First Assessment Sub-Skill ID: \" + pm.environment.get(\"assessmentSubSkillId\"));",
									"}",
									"",
									"// Loop to create next sub-skill",
									"let currentSubSkillIndex = pm.environment.get(\"currentSubSkillIndex\");",
									"const subSkillNames = pm.environment.get(\"subSkillNames\");",
									"",
									"if (currentSubSkillIndex < subSkillNames.length - 1) {",
									"    currentSubSkillIndex++;",
									"    pm.environment.set(\"currentSubSkillIndex\", currentSubSkillIndex);",
									"    const nextSubSkillName = subSkillNames[currentSubSkillIndex];",
									"    pm.request.body.raw = JSON.stringify({",
									"        \"name\": nextSubSkillName,",
									"        \"max_score\": 10,",
									"        \"skillId\": pm.environment.get(\"assessmentSkillId\")",
									"    });",
									"    postman.setNextRequest(\"Create 4 Assessment Sub-Skills\");",
									"} else {",
									"    postman.setNextRequest(null); // Stop the loop",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{subSkillNames[currentSubSkillIndex]}}\",\n    \"max_score\": 10,\n    \"skillId\": {{assessmentSkillId}}\n}"
						},
						"url": {
							"raw": "http://localhost:{{port}}/api/admin/assessment-sub-skills",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"admin",
								"assessment-sub-skills"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Assessment Sub-Skills",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Get sub-skills successful\", function () {",
									"    pm.response.to.have.jsonBody(\"success\", true);",
									"    pm.expect(pm.response.json().subSkills).to.be.an('array');",
									"    pm.expect(pm.response.json().subSkills).to.have.lengthOf(4);",
									"});",
									"const jsonData = pm.response.json();",
									"pm.expect(jsonData.subSkills[0].AssessmentSkill.name).to.eql('Classroom Management (Updated)');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:{{port}}/api/admin/assessment-sub-skills",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"admin",
								"assessment-sub-skills"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Assessment Sub-Skills by Parent Skill",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Get sub-skills by parent skill successful\", function () {",
									"    pm.response.to.have.jsonBody(\"success\", true);",
									"    pm.expect(pm.response.json().subSkills).to.be.an('array');",
									"    pm.expect(pm.response.json().subSkills).to.have.lengthOf(4);",
									"});",
									"const jsonData = pm.response.json();",
									"pm.expect(jsonData.subSkills[0].skillId).to.eql(pm.environment.get(\"assessmentSkillId\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:{{port}}/api/admin/assessment-sub-skills/by-skill/{{assessmentSkillId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"admin",
								"assessment-sub-skills",
								"by-skill",
								"{{assessmentSkillId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Assessment Sub-Skill",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Sub-skill updated successfully\", function () {",
									"    pm.response.to.have.jsonBody(\"success\", true);",
									"    pm.response.to.have.jsonBody(\"message\", \"Assessment sub-skill updated successfully\");",
									"    pm.expect(pm.response.json().subSkill.name).to.eql('Lesson Planning (Updated)');",
									"    pm.expect(pm.response.json().subSkill.max_score).to.eql(9);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Lesson Planning (Updated)\",\n    \"max_score\": 9\n}"
						},
						"url": {
							"raw": "http://localhost:{{port}}/api/admin/assessment-sub-skills/{{assessmentSubSkillId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"admin",
								"assessment-sub-skills",
								"{{assessmentSubSkillId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "port",
			"value": "5000",
			"type": "string"
		},
		{
			"key": "adminEmail",
			"value": "admin@test.com",
			"type": "string"
		},
		{
			"key": "adminPassword",
			"value": "adminpassword",
			"type": "string"
		},
		{
			"key": "studentEmail",
			"value": "student@test.com",
			"type": "string"
		},
		{
			"key": "studentPassword",
			"value": "studentpassword",
			"type": "string"
		},
		{
			"key": "schoolEmail",
			"value": "school@test.com",
			"type": "string"
		},
		{
			"key": "schoolPassword",
			"value": "schoolpassword",
			"type": "string"
		},
		{
			"key": "adminToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "studentToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "schoolToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "adminUserId",
			"value": "",
			"type": "string"
		},
		{
			"key": "studentUserId",
			"value": "",
			"type": "string"
		},
		{
			"key": "schoolUserId",
			"value": "",
			"type": "string"
		},
		{
			"key": "uploadedImageUrl",
			"value": "",
			"type": "string"
		},
		{
			"key": "firstPersonalSkillId",
			"value": "",
			"type": "string"
		},
		{
			"key": "certificationId",
			"value": "",
			"type": "string"
		},
		{
			"key": "assessmentCategoryId",
			"value": "",
			"type": "string"
		},
		{
			"key": "assessmentSkillId",
			"value": "",
			"type": "string"
		},
		{
			"key": "assessmentSubSkillId",
			"value": "",
			"type": "string"
		},
		{
			"key": "updatedStudentEmail",
			"value": "",
			"type": "string"
		},
		{
			"key": "subSkillNames",
			"value": "",
			"type": "string"
		},
		{
			"key": "currentSubSkillIndex",
			"value": "",
			"type": "string"
		}
	]
}
